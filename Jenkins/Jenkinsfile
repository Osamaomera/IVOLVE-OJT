@Library('java-sharedlibrary') _
// @Library('github.com/Osamaomera/shared_library') _
pipeline {

    // agent { label 'slave1' }
    agent any 

    environment {
        dockerHubCredentialsID	    = 'DockerHub'  		    			// DockerHub credentials ID.
        imageName   		    = 'osayman74/java-app'     			// DockerHub repo/image name.
        OPENSHIFT_SERVER = 'https://api.ocp-training.ivolve-test.com:6443'
        OPENSHIFT_PROJECT = 'osamaayman'
        SERVICE_ACCOUNT_TOKEN = 'SERVICE_ACCOUNT_TOKEN'
    }
    


    stages {       

        stage('Test') {
            steps {
                script {
                    dir('Jenkins'){
                        dir('app-master'){   
                	    echo "Running Unit Test..."
			            // sh 'chmod 744 ./gradlew'
			            // sh './gradlew clean test'
                        }
                    }
        	    }
    	    }
	}
	
       
        stage('Build and Push Docker Image') {
            steps {
                script {
                	// Navigate to the directory contains Dockerfile
                 	dir('Jenkins') {
                        dir('app-master') {
                 		    buildandPushDockerImage("${dockerHubCredentialsID}", "${imageName}")
                    }
                }
            }
	    }
    }       
        
        stage('Install OpenShift CLI') {
            steps {
                script {
                    // Define the desired version of OpenShift CLI
                    def ocVersion = '4.10.0'  // Example version, replace with the desired version

                    // Download and install OpenShift CLI
                    sh """
                        wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${ocVersion}/openshift-client-linux.tar.gz -P /tmp
                        tar -xzf /tmp/openshift-client-linux.tar.gz -C /tmp
                        sudo mv /tmp/oc /usr/local/bin/
                        sudo mv /tmp/kubectl /usr/local/bin/
                    """
                }
            }
        }

        stage('Verify OpenShift CLI') {
            steps {
                script {
                    // Verify the installation of OpenShift CLI
                    sh 'oc version'
                }
            }
        }

        stage('Login to OpenShift') {
            steps {
                script {
                    // Login to OpenShift using the token
                    sh 'oc login https://api.ocp-training.ivolve-test.com:6443 --token=SERVICE_ACCOUNT_TOKEN'
                }
            }
        }
        // stage('Build Docker Image') {
        //     steps {
        //         script {
        // 		echo "Building docker image ..."
        // 		sh "docker build -t ${imageName}:${BUILD_NUMBER} ."
        //         }
        //     }
        // }

       
        // stage('push Docker Image') {
        //     steps {
        //         script {
        // 		echo "pushing docker image ..."
		// 	withCredentials([usernamePassword(credentialsId: "${dockerHubCredentialsID}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]){
		// 		sh "docker login -u ${USERNAME} -p ${PASSWORD}"
        // 		}
		// 	sh "docker push ${imageName}:${BUILD_NUMBER}"
        //         }
        //     }
        // }
	    
	stage('Deploy on OpenShift cluster') {
            steps {
                script {
        		// Navigate to the directory contains Deployment and Service YAML files
                    dir('Jenkins'){
                        dir('openshift'){
                            deployOnOpenShift("${SERVICE_ACCOUNT_TOKEN}" , String imageName , "${OPENSHIFT_SERVER}", "${OPENSHIFT_PROJECT}")
                        }
                    }

                }
            }
        }

    }

    post {
        success {
            echo "${JOB_NAME}-${BUILD_NUMBER} pipeline succeeded"
        }
        failure {
            echo "${JOB_NAME}-${BUILD_NUMBER} pipeline failed"
        }
    }
}
